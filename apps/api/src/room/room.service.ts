import {
  Injectable,
  NotFoundException,
  InternalServerErrorException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CreateRoomDto } from './dto/create-room.dto';
import { UpdateRoomDto } from './dto/update-room.dto';
import { Room } from './entities/room.entity';

@Injectable()
export class RoomService {
  constructor(
    @InjectRepository(Room) private roomRepository: Repository<Room>,
  ) {}

  async create(createRoomDto: CreateRoomDto) {
    try {
      const room = this.roomRepository.create(createRoomDto);
      // roomID is automatically generated by the database as a UUID
      return await this.roomRepository.save(room);
    } catch (error) {
      throw new InternalServerErrorException('Failed to create room');
    }
  }

  async findAll() {
    try {
      return await this.roomRepository.find();
    } catch (error) {
      throw new InternalServerErrorException('Failed to fetch rooms');
    }
  }

  async findOne(id: string) {
    try {
      const room = await this.roomRepository.findOne({ where: { roomID: id } });
      if (!room) throw new NotFoundException(`Room with ID ${id} not found`);
      return room;
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      throw new InternalServerErrorException('Failed to fetch room');
    }
  }

  async update(id: string, updateRoomDto: UpdateRoomDto) {
    try {
      const room = await this.roomRepository.findOne({ where: { roomID: id } });
      if (!room) throw new NotFoundException(`Room with ID ${id} not found`);
      const updatedRoom = this.roomRepository.merge(room, updateRoomDto);
      return await this.roomRepository.save(updatedRoom);
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      throw new InternalServerErrorException('Failed to update room');
    }
  }

  async remove(id: string) {
    try {
      const room = await this.roomRepository.findOne({ where: { roomID: id } });
      if (!room) throw new NotFoundException(`Room with ID ${id} not found`);
      await this.roomRepository.remove(room);
      return { message: `Room with ID ${id} removed` };
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      throw new InternalServerErrorException('Failed to remove room');
    }
  }
}
